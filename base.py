from sqlalchemy import create_engine, Column, Integer, String, Text, Boolean, ForeignKey, DateTime
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
from datetime import datetime, UTC

Base = declarative_base()

# --- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ---
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    username = Column(String(50), nullable=False, unique=True)
    email = Column(String(100), unique=True)
    password_hash = Column(String(255))
    created_at = Column(DateTime, default=lambda: datetime.now(UTC))
    tasks = relationship("Task", back_populates="user")

# --- –ó–∞–≤–¥–∞–Ω–Ω—è ---
class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    title = Column(String(100), nullable=False)
    description = Column(Text)
    status = Column(String(20), default="active")
    deadline = Column(DateTime)
    created_at = Column(DateTime, default=lambda: datetime.now(UTC))
    user = relationship("User", back_populates="tasks")
    steps = relationship("TaskStep", back_populates="task", cascade="all, delete-orphan")

# --- –ö—Ä–æ–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è ---
class TaskStep(Base):
    __tablename__ = "task_steps"
    id = Column(Integer, primary_key=True)
    task_id = Column(Integer, ForeignKey("tasks.id"))
    title = Column(String(100), nullable=False)
    is_done = Column(Boolean, default=False)
    created_at = Column(DateTime, default=lambda: datetime.now(UTC))
    task = relationship("Task", back_populates="steps")

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ ---
engine = create_engine("sqlite:///learning_app.db")
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# --- –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é ---
def main_menu():
    while True:
        print("\n--- üìò –°–ò–°–¢–ï–ú–ê –ö–ï–†–£–í–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø–ú–ò ---")
        print("1. –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("2. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
        print("3. –î–æ–¥–∞—Ç–∏ –∫—Ä–æ–∫ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è")
        print("4. –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∫—Ä–æ–∫ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π")
        print("5. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
        print("6. –í–∏–π—Ç–∏")

        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ")

        if choice == "1":
            add_user()
        elif choice == "2":
            add_task()
        elif choice == "3":
            add_step()
        elif choice == "4":
            mark_step_done()
        elif choice == "5":
            show_all()
        elif choice == "6":
            print("üëã –í–∏—Ö—ñ–¥ —ñ–∑ –ø—Ä–æ–≥—Ä–∞–º–∏.")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def add_user():
    username = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ")
    email = input("–í–≤–µ–¥—ñ—Ç—å email: ")
    password = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: ")

    user = User(username=username, email=email, password_hash=password)
    session.add(user)
    session.commit()
    print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{username}' –¥–æ–¥–∞–Ω–æ!")

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è ---
def add_task():
    username = input("–î–ª—è —è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è? (—ñ–º'—è): ")
    user = session.query(User).filter_by(username=username).first()
    if not user:
        print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    title = input("–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è: ")
    desc = input("–û–ø–∏—Å: ")
    deadline_input = input("–î–µ–¥–ª–∞–π–Ω (–†–†–†–†-–ú–ú-–î–î): ")
    deadline = datetime.strptime(deadline_input, "%Y-%m-%d")

    task = Task(title=title, description=desc, deadline=deadline, user=user)
    session.add(task)
    session.commit()
    print(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è '{title}' —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}!")

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—Ä–æ–∫—É ---
def add_step():
    task_title = input("–î–ª—è —è–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∏ –∫—Ä–æ–∫? (–Ω–∞–∑–≤–∞): ")
    task = session.query(Task).filter_by(title=task_title).first()
    if not task:
        print("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    title = input("–ù–∞–∑–≤–∞ –∫—Ä–æ–∫—É: ")
    step = TaskStep(title=title, task=task)
    session.add(step)
    session.commit()
    print(f"‚úÖ –ö—Ä–æ–∫ '{title}' –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è '{task_title}'!")

# --- –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–æ–∫—É —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ ---
def mark_step_done():
    step_title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—Ä–æ–∫—É, —è–∫–∏–π –≤–∏–∫–æ–Ω–∞–Ω–æ: ")
    step = session.query(TaskStep).filter_by(title=step_title).first()
    if not step:
        print("‚ùå –ö—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    step.is_done = True
    session.commit()
    print(f"‚úÖ –ö—Ä–æ–∫ '{step_title}' –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π!")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –¥–∞–Ω–∏—Ö ---
def show_all():
    users = session.query(User).all()
    if not users:
        print("üì≠ –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–±–æ –∑–∞–≤–¥–∞–Ω—å.")
        return

    for user in users:
        print(f"\nüë§ {user.username} ({user.email})")
        for task in user.tasks:
            print(f"  üìã {task.title} ‚Äî {task.status} (–¥–æ {task.deadline.date()})")
            for step in task.steps:
                icon = "‚úÖ" if step.is_done else "üî∏"
                print(f"     {icon} {step.title}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    main_menu()
